declare function request(options: any): any;
declare function handleSyncApis(key: string, global: Record<string, any>, args: any[]): any;
declare function transformMeta(api: string, options: Record<string, any>): {
    key: string;
    options: Record<string, any>;
};
declare function modifyApis(apis: Set<string>): void;
declare function modifyAsyncResult(key: string, res: any): void;
declare function initNativeApi(taro: any): void;
declare const needPromiseApis: Set<string>;
declare const components: {
    View: {
        "disable-scroll": string;
        hidden: string;
        bindAppear: string;
        bindDisappear: string;
        bindFirstAppear: string;
    };
    Text: {
        "number-of-lines": string;
    };
    Map: {
        skew: string;
        rotate: string;
        polygons: string;
        "include-padding": string;
        "ground-overlays": string;
        "tile-overlay": string;
        "custom-map-style": string;
        setting: string;
        optimize: string;
        bindRegionChange: string;
        bindPanelTap: string;
    };
    Button: {
        scope: string;
        "public-id": string;
        bindGetAuthorize: string;
        bindError: string;
    };
    Checkbox: {
        bindChange: string;
    };
    Input: {
        "random-number": string;
        controlled: string;
        enableNative: string;
    };
    Slider: {
        "track-size": string;
        "handle-size": string;
        "handle-color": string;
    };
    Switch: {
        controlled: string;
    };
    Textarea: {
        "show-count": string;
        controlled: string;
        enableNative: string;
    };
    MovableView: {
        bindChangeEnd: string;
    };
    ScrollView: {
        "scroll-animation-duration": string;
        "trap-scroll": string;
    };
    Swiper: {
        "active-class": string;
        "changing-class": string;
        acceleration: string;
        "disable-programmatic-animation": string;
        "disable-touch": string;
        bindAnimationEnd: string;
    };
    Image: {
        "default-source": string;
    };
    Camera: {
        mode: string;
        "output-dimension": string;
        "frame-size": string;
        bindScanCode: string;
        bindReady: string;
    };
    Canvas: {
        type: string;
        width: string;
        height: string;
        bindReady: string;
    };
    Video: {
        "poster-size": string;
        "mobilenet-hint-type": string;
        bindLoading: string;
        bindUserAction: string;
        bindStop: string;
        bindRenderStart: string;
    };
    Lottie: {
        autoplay: string;
        path: string;
        speed: string;
        repeatCount: string;
        autoReverse: string;
        assetsPath: string;
        placeholder: string;
        djangoId: string;
        md5: string;
        optimize: string;
        bindDataReady: string;
        bindDataFailed: string;
        bindAnimationStart: string;
        bindAnimationEnd: string;
        bindAnimationRepeat: string;
        bindAnimationCancel: string;
        bindDataLoadReady: string;
    };
    Lifestyle: {
        "public-id": string;
        memo: string;
        bindFollow: string;
    };
    LifeFollow: {
        sceneId: string;
        checkFollow: string;
        bindCheckFollow: string;
        bindClose: string;
    };
    ContactButton: {
        "tnt-inst-id": string;
        scene: string;
        size: string;
        color: string;
        icon: string;
        "alipay-card-no": string;
        "ext-info": string;
    };
    ArCamera: {
        devicePosition: string;
        marker: string;
        mode: string;
        useCapturedImage: string;
        bindInit: string;
        bindStop: string;
        bindError: string;
        bindARFrame: string;
    };
};
declare const hostConfig: {
    initNativeApi: typeof initNativeApi;
    getMiniLifecycle(config: any): any;
    getEventCenter(Events: any): any;
    modifyTaroEvent(event: any, node: any): void;
    isBubbleEvents(eventName: any): boolean;
};
export { handleSyncApis, initNativeApi, modifyApis, modifyAsyncResult, request, transformMeta, needPromiseApis, components, hostConfig };
